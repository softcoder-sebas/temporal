using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;

namespace MyMarket_ERP
{
    internal static class PurchaseOrderRepository
    {
        private const int TargetStockLevel = 30;
        private const int MinimumReorderQuantity = 10;

        public static IReadOnlyList<PurchaseOrder> GetAll()
        {
            var orders = new Dictionary<int, PurchaseOrder>();

            using var cn = Database.OpenConnection();
            using var cmd = new SqlCommand(@"
                SELECT po.Id, po.Code, po.Supplier, po.Status, po.CreatedAt, po.AutoGenerated, po.AutoRule, po.Notes,
                       poi.Id AS ItemId, poi.ProductId, poi.ProductCode, poi.ProductName, poi.Qty, poi.UnitPrice
                FROM dbo.PurchaseOrders po
                LEFT JOIN dbo.PurchaseOrderItems poi ON poi.PurchaseOrderId = po.Id
                ORDER BY po.CreatedAt DESC, poi.Id ASC;", cn);
            using var rd = cmd.ExecuteReader();
            while (rd.Read())
            {
                int orderId = rd.GetInt32(0);
                if (!orders.TryGetValue(orderId, out var order))
                {
                    var createdAt = rd.GetDateTime(4);
                    order = new PurchaseOrder
                    {
                        Id = orderId,
                        Code = rd.GetString(1),
                        Supplier = rd.IsDBNull(2) ? "(Proveedor pendiente)" : rd.GetString(2),
                        Status = rd.GetString(3),
                        Date = createdAt,
                        CreatedAt = createdAt,
                        IsAutoGenerated = rd.GetBoolean(5),
                        AutoRule = rd.IsDBNull(6) ? string.Empty : rd.GetString(6) ?? string.Empty,
                        Notes = rd.IsDBNull(7) ? string.Empty : rd.GetString(7) ?? string.Empty
                    };
                    orders.Add(orderId, order);
                }

                if (!rd.IsDBNull(8))
                {
                    var item = new PurchaseItem
                    {
                        ProductId = rd.IsDBNull(9) ? (int?)null : rd.GetInt32(9),
                        ProductCode = rd.IsDBNull(10) ? string.Empty : rd.GetString(10),
                        Name = rd.GetString(11),
                        Qty = rd.GetInt32(12),
                        UnitPrice = rd.GetDecimal(13)
                    };
                    order.Items.Add(item);
                }
            }

            return orders.Values
                .OrderByDescending(o => o.Date)
                .ToList();
        }

        public static void SaveManualOrder(PurchaseOrder order)
        {
            if (order is null)
                throw new ArgumentNullException(nameof(order));
            if (order.Items.Count == 0)
                throw new InvalidOperationException("La orden no contiene productos.");

            using var cn = Database.OpenConnection();
            using var tx = cn.BeginTransaction();
            bool committed = false;
            try
            {
                string code = EnsureUniqueCode(order.Code, cn, tx);
                var insertOrder = new SqlCommand(@"
                    INSERT INTO dbo.PurchaseOrders(Code, Supplier, Status, CreatedAt, AutoGenerated, AutoRule, Notes)
                    VALUES(@code, @supplier, @status, @createdAt, 0, NULL, @notes);
                    SELECT CAST(SCOPE_IDENTITY() AS INT);", cn, tx);
                insertOrder.Parameters.AddWithValue("@code", code);
                insertOrder.Parameters.AddWithValue("@supplier", string.IsNullOrWhiteSpace(order.Supplier) ? (object)DBNull.Value : order.Supplier.Trim());
                insertOrder.Parameters.AddWithValue("@status", string.IsNullOrWhiteSpace(order.Status) ? "Cotizado" : order.Status.Trim());
                insertOrder.Parameters.AddWithValue("@createdAt", order.Date == default ? DateTime.Now : order.Date);
                insertOrder.Parameters.AddWithValue("@notes", string.IsNullOrWhiteSpace(order.Notes) ? (object)DBNull.Value : order.Notes.Trim());
                int orderId = (int)insertOrder.ExecuteScalar();

                foreach (var item in order.Items)
                {
                    var insertItem = new SqlCommand(@"
                        INSERT INTO dbo.PurchaseOrderItems(PurchaseOrderId, ProductId, ProductCode, ProductName, Qty, UnitPrice)
                        VALUES(@orderId, @productId, @productCode, @productName, @qty, @price);", cn, tx);
                    insertItem.Parameters.AddWithValue("@orderId", orderId);
                    insertItem.Parameters.AddWithValue("@productId", item.ProductId.HasValue ? item.ProductId.Value : (object)DBNull.Value);
                    insertItem.Parameters.AddWithValue("@productCode", string.IsNullOrWhiteSpace(item.ProductCode) ? (object)DBNull.Value : item.ProductCode.Trim());
                    insertItem.Parameters.AddWithValue("@productName", item.Name);
                    insertItem.Parameters.AddWithValue("@qty", item.Qty);
                    insertItem.Parameters.AddWithValue("@price", item.UnitPrice);
                    insertItem.ExecuteNonQuery();
                }

                tx.Commit();
                committed = true;
            }
            catch
            {
                tx.Rollback();
                throw;
            }
            finally
            {
                if (committed)
                    DataEvents.PublishInventarioChanged();
            }
        }

        public static void EnsureAutoDraftsForCriticalStock(IEnumerable<(int ProductId, string Code, string Name, int Stock)> criticalProducts)
        {
            if (criticalProducts is null)
                return;

            using var cn = Database.OpenConnection();
            bool created = false;

            foreach (var product in criticalProducts)
            {
                if (EnsureAutoDraftForProduct(cn, product.ProductId, product.Code, product.Name, product.Stock))
                    created = true;
            }

            if (created)
                DataEvents.PublishInventarioChanged();
        }

        private static bool EnsureAutoDraftForProduct(SqlConnection cn, int productId, string code, string name, int stock)
        {
            using var check = new SqlCommand(@"
                SELECT TOP 1 po.Id
                FROM dbo.PurchaseOrders po
                INNER JOIN dbo.PurchaseOrderItems poi ON poi.PurchaseOrderId = po.Id
                WHERE poi.ProductId = @productId
                  AND po.Status IN ('Borrador','Pendiente','Cotizado','Aprobado');", cn);
            check.Parameters.AddWithValue("@productId", productId);
            var existing = check.ExecuteScalar();
            if (existing != null && existing != DBNull.Value)
                return false;

            decimal unitPrice = GetProductPrice(cn, productId);
            int qty = Math.Max(MinimumReorderQuantity, TargetStockLevel - stock);
            if (qty <= 0)
                qty = MinimumReorderQuantity;

            using var tx = cn.BeginTransaction();
            try
            {
                string poCode = string.Format(CultureInfo.InvariantCulture, "PO-AUTO-{0:yyyyMMddHHmmss}-{1}", DateTime.UtcNow, productId);
                var insertOrder = new SqlCommand(@"
                    INSERT INTO dbo.PurchaseOrders(Code, Supplier, Status, CreatedAt, AutoGenerated, AutoRule, Notes)
                    VALUES(@code, @supplier, 'Borrador', @createdAt, 1, 'StockCritico', @notes);
                    SELECT CAST(SCOPE_IDENTITY() AS INT);", cn, tx);
                insertOrder.Parameters.AddWithValue("@code", poCode);
                insertOrder.Parameters.AddWithValue("@supplier", "(Proveedor pendiente)");
                insertOrder.Parameters.AddWithValue("@createdAt", DateTime.Now);
                insertOrder.Parameters.AddWithValue("@notes", string.Format(CultureInfo.InvariantCulture, "Generado automáticamente por stock crítico. Stock actual: {0}", stock));
                int orderId = (int)insertOrder.ExecuteScalar();

                var insertItem = new SqlCommand(@"
                    INSERT INTO dbo.PurchaseOrderItems(PurchaseOrderId, ProductId, ProductCode, ProductName, Qty, UnitPrice)
                    VALUES(@orderId, @productId, @productCode, @productName, @qty, @price);", cn, tx);
                insertItem.Parameters.AddWithValue("@orderId", orderId);
                insertItem.Parameters.AddWithValue("@productId", productId);
                insertItem.Parameters.AddWithValue("@productCode", code);
                insertItem.Parameters.AddWithValue("@productName", name);
                insertItem.Parameters.AddWithValue("@qty", qty);
                insertItem.Parameters.AddWithValue("@price", unitPrice);
                insertItem.ExecuteNonQuery();

                tx.Commit();
                return true;
            }
            catch
            {
                tx.Rollback();
                throw;
            }
        }

        private static string EnsureUniqueCode(string? proposedCode, SqlConnection cn, SqlTransaction tx)
        {
            if (!string.IsNullOrWhiteSpace(proposedCode) && !CodeExists(proposedCode.Trim(), cn, tx))
                return proposedCode.Trim();

            string code;
            int attempt = 0;
            do
            {
                attempt++;
                code = string.Format(CultureInfo.InvariantCulture, "PO-{0:yyyyMMddHHmmss}-{1}", DateTime.UtcNow, attempt);
            }
            while (CodeExists(code, cn, tx));

            return code;
        }

        private static bool CodeExists(string code, SqlConnection cn, SqlTransaction tx)
        {
            using var cmd = new SqlCommand("SELECT 1 FROM dbo.PurchaseOrders WHERE Code = @code;", cn, tx);
            cmd.Parameters.AddWithValue("@code", code);
            return cmd.ExecuteScalar() != null;
        }

        private static decimal GetProductPrice(SqlConnection cn, int productId)
        {
            using var cmd = new SqlCommand("SELECT Price FROM dbo.Products WHERE Id = @id;", cn);
            cmd.Parameters.AddWithValue("@id", productId);
            var result = cmd.ExecuteScalar();
            if (result == null || result == DBNull.Value)
                return 0m;
            return Convert.ToDecimal(result, CultureInfo.InvariantCulture);
        }
    }
}
